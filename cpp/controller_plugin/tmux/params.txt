######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_managers/config/public/control_manager.yaml

mrs_uav_managers:

  control_manager:

    # list of names of dynamically loaded trackers
    trackers : [
    ]

    # list of names of dynamically loaded controllers
    controllers : [
    ]

    state_input: 0 # {0 = mrs_msgs::UavState, 1 = nav_msgs::Odometry}

    # tracker used for landing and takeoff
    landing_takeoff_tracker: "LandoffTracker"

    safety:

      tilt_limit:

        eland:
          enabled: true
          limit: 75.0 # [deg]

        disarm:
          enabled: true
          limit: 75.0 # [deg]

      tilt_error_disarm:
        enabled: true
        timeout: 0.5 # [s] # for how long the error has to be present to disarm
        error_threshold: 20.0 # [deg]

      yaw_error_eland:
        enabled: true
        limit: 90.0 # [deg]

      # tracker used for emergency hover routine
      ehover_tracker: "LandoffTracker"

      # controller used for safety landing (feed forward)
      failsafe_controller: "FailsafeController"

      # after not receiving odometry for more than this, the failsafe landing will trigger
      # will be overriden for ACCELERATION+ output mode
      odometry_max_missing_time: 0.1 # [s]

      # trigger eland when the odometry corrections are too unreliable
      # - should be false when using custom odometry source without available innovation values
      # - the innovation limit is set per-controller in the controllers.yaml file
      odometry_innovation_eland:
        enabled: true

      # emergency landing (still feedback)
      eland:

        controller: "EmergencyController"

        # Making those numbers smaller than "factor: 0.5, timeout: 2.0" can result in premature
        # landing detection, especially in the case of wild eland with weird initial conditions.
        # It might be safe with just the normal landing though.
        cutoff_mass_factor:  0.5 # how much lighter does the drone appear to be?
        cutoff_timeout:  2.0 # [s] how long does the throttle has to be below the mass factor

        disarm: true
        timer_rate: 10 # [Hz]

      escalating_failsafe:

        service:
          enabled: true # can be called by a service

        rc:
          enabled: true # can be triggered by RC button
          channel_number: 7 # [-],  activation RC channel
          threshold: 0.5 # [%/100]

        # how often does it allow to escalate
        timeout: 2.0 # [s]

        ehover: true
        eland: true
        failsafe: false

      parachute:

        enabled: false

      # when the active tracker returns empty command
      tracker_error_action: "eland" # {eland, ehover}

      # handoff directly to RC control
      # * overrides eland and failsafe landing
      # * recommended when flying over water
      rc_emergency_handoff:
        enabled: false

      min_throttle_null_tracker: 0.10 # [] minimum throttle when not flying

    trajectory_tracking:

      snap_to_safety_area: false

    obstacle_bumper:

      enabled: true

      switch_tracker: true
      tracker: "MpcTracker"

      switch_controller: true
      controller: "Se3Controller"

      horizontal:

        min_distance_to_obstacle: 1.2 # [m]

        # when enabled, the min_distance_to_obstacle will increased by the distances
        # needed for stopping given the current system constraints
        derived_from_dynamics: true

      vertical:

        min_distance_to_obstacle: 1.2 # [m]

        # when enabled, the min_distance_to_obstacle will increased by the distances
        # needed for stopping given the current system constraints
        derived_from_dynamics: true

    joystick:

      enabled: true

      # the trajectory mode is for debugging trajectory control ONLY
      mode: 0 # {0 = goto, 1 = trajectory}

      # carrot on a stick distance for the goto mode
      carrot_distance: 4.00 # [m]

      joystick_timer_rate: 30 # [Hz]

      # mainly for tuning low-level attitude controllers
      # is initiated by pressing "start" for > 3 secs
      attitude_control:

        # tracker and controller used to control the drone using a joystick
        tracker: "JoyTracker"
        controller: "MpcController"

        # what tracker and controller should be activate when
        # switching back from joystick control?
        fallback:

          tracker: "MpcTracker"
          controller: "EmergencyController"

      # channel numbers, indeces in array
      channels:

        # The main front buttons
        # if any of those are pressend in the "joystic control mode",
        # the control returns back to autonomy using the "fallback"
        # controller and tracker
        A: 0 # []
        B: 1 # []
        X: 2 # []
        Y: 3 # []

        # if the "start" button is pressed and held down for > 3 sec, the UAV switches
        # to a tracker and controller specified above in the "attitude_control" section.
        # Autonomy in this mode is not guaranteed, it depends on the specified tracker and controller.
        start: 7 # []

        # If "back" button is pressed, the UAV switches to a GOTO mode, where
        # references are set using the joystick. This is fully autonomous mode,
        # or more specifically, it uses the tracker and controller which were
        # already active.
        back: 6 # []

        # if LT and RT are pressed together, the failsafe is triggered
        LT: 2 # [] left trigger
        RT: 5 # [] right trigger

        # if L_joy and R_joy are pressed together, emergency landing is triggered
        L_joy: 9 # [] pressing left joypad
        R_joy: 10 # [] pressing right joypad

        pitch: 1 # []
        roll: 3 # []
        heading: 0 # []
        throttle: 4 # []

      # multipliers for scaling and reversing the channels
      channel_multipliers:

        pitch: 1.0 # []
        roll: 1.0 # []
        heading: 1.0 # []
        throttle: 1.0 # []

    rc_joystick:

      enabled: true
      # activation channel
      channel_number: 6 # indexed from 0

      horizontal_speed: 1.00 # [m/s]
      vertical_speed: 1.00 # [m/s]
      heading_rate: 0.20 # [rad/s]

      channels:
        pitch: 2
        roll: 0
        heading: 3
        throttle: 1

    pirouette:

      speed: 0.25 # [rad/s]
      timer_rate: 10 # [Hz]

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_managers/config/public/controllers.yaml

mrs_uav_managers:

  control_manager:

    Se3Controller:
      eland_threshold: 1.5 # [m], position error triggering eland
      failsafe_threshold: 2.5 # [m], position error triggering failsafe land
      odometry_innovation_threshold: 1.5 # [m], position odometry innovation threshold

    MpcController:
      eland_threshold: 3.5 # [m], position error triggering eland
      failsafe_threshold: 4.5 # [m], position error triggering failsafe land
      odometry_innovation_threshold: 2.5 # [m], position odometry innovation threshold

    FailsafeController:
      eland_threshold: 0.0 # [m], position error triggering eland
      failsafe_threshold: 0.0 # [m], position error triggering failsafe land
      odometry_innovation_threshold: 0.0 # [m], position odometry innovation threshold

    EmergencyController:
      eland_threshold: 3.0 # [m], position error triggering eland
      failsafe_threshold: 4.0 # [m], position error triggering failsafe land
      odometry_innovation_threshold: 3.0 # [m], position odometry innovation threshold

    MidairActivationController:
      eland_threshold: 3.0 # [m], position error triggering eland
      failsafe_threshold: 4.0 # [m], position error triggering failsafe land
      odometry_innovation_threshold: 3.0 # [m], position odometry innovation threshold

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_managers/config/public/active_estimators.yaml

mrs_uav_managers:

  estimation_manager:

    # loaded state estimator plugins
    # available in mrs_uav_state_estimators: gps_garmin, gps_baro, rtk, ground_truth, dummy
    state_estimators: [
    "gps_garmin",
    "gps_baro",
    # "rtk",
    # "ground_truth",
    # "dummy"
    ]

    initial_state_estimator: "gps_garmin" # will be used as the first state estimator
    agl_height_estimator: "garmin_agl" # only slightly filtered height for checking min height (not used in control feedback)

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_managers/config/public/uav_manager.yaml

mrs_uav_managers:

  uav_manager:

    # require gain or constraint manager running to takeoff?
    require_gain_manager: true
    require_constraint_manager: true

    # periodically checks if max height was exceeded
    # if so, retakes control and descends below it
    max_height_checking:

      enabled: true
      rate: 10.0 # [Hz]
      safety_height_offset: 0.25 # how much lower to descend below the max height

    # periodically checks if min height was exceeded
    # if so, retakes control and ascends above it
    min_height_checking:

      enabled: true
      rate: 10.0 # [Hz]
      min_height: 0.5 # [m]
      safety_height_offset: 0.25 # how much higher to ascend above the min height

    takeoff:

      rate: 10 # [Hz]

      during_takeoff:
        controller: "MpcController"
        tracker: "LandoffTracker"

      after_takeoff:
        controller: "MpcController"
        tracker: "MpcTracker"

      takeoff_height: 1.5

    landing:

      rate: 10 # [Hz]
      landing_tracker: "LandoffTracker"
      landing_controller: "MpcController"

      # those two must apply simultaneously
      landing_cutoff_mass_factor:  0.5 # how much lighter does the drone appear to be?
      landing_cutoff_timeout:  2.0 # [s] how long does the throttle has to be below the mass factor

      disarm: true

      # if the height estimate is available, and
      # if the UAV higher than this height:
      # the UAV will first descend to this height using a goto command,
      # and then land slowly using the landing tracker and controller
      descend_height: 2.0 # [m]

      tracking_tolerance:
        translation: 0.1 # [m]
        heading: 0.1 # [rad]

    midair_activation:

      after_activation:
        controller: "MpcController"
        tracker: "MpcTracker"

    flight_timer:

      enabled: false
      rate: 1 # [Hz]
      max_time: 10 # [s]

    # detecting if desired throttle cross max threshold, triggers landing after that
    max_throttle:

      enabled: true
      rate: 30 # [Hz]
      max_throttle: 0.80 # [-]
      eland_timeout: 1.0 # [s]
      ungrip_timeout: 0.5 # [s]

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_managers/config/public/transform_manager/transform_manager.yaml

mrs_uav_managers:

  transform_manager:

    local_origin_tf:
      enabled: true # local_origin tf should be published by default unless some other node already publishes it
      parent: "fcu" # fcu should be the parent if using the default inverted mrs tf tree convention with fcu as the root of the tf tree
      child: "local_origin"

    stable_origin_tf:
      enabled: true # stable_origin tf should be published by default unless some other node already publishes it
      parent: "fcu" # fcu should be the parent if using the default inverted mrs tf tree convention with fcu as the root of the tf tree
      child: "stable_origin"

    fixed_origin_tf:
      enabled: true # fixed_origin tf should be published by default unless some other node already publishes it
      parent: "fcu" # fcu should be the parent if using the default inverted mrs tf tree convention with fcu as the root of the tf tree
      child: "fixed_origin"

    utm_origin_tf:
      enabled: true # utm_origin tf should be published by default unless some other node already publishes it
      parent: "fcu" # fcu should be the parent if using the default inverted mrs tf tree convention with fcu as the root of the tf tree
      child: "utm_origin"

    world_origin_tf:
      enabled: true # world_origin tf should be published by default unless some other node already publishes it
      parent: "fcu" # fcu should be the parent if using the default inverted mrs tf tree convention with fcu as the root of the tf tree
      child: "world_origin"

    fcu_untilted_tf:
      enabled: true # fcu_untilted tf should be published by default unless some other node already publishes it
      parent: "fcu" # fcu should be the parent if using the default inverted mrs tf tree convention with fcu as the root of the tf tree
      child: "fcu_untilted"

    altitude_amsl_tf:
      enabled: true # amsl tf should be published by default unless some other node already publishes it
      parent: "fcu_untilted" # fcu should be the parent if using the default inverted mrs tf tree convention with fcu as the root of the tf tree
      child: "amsl_origin"

    # frame_id with the frame defined by the position of the RTK antenna
    rtk_antenna:
      frame_id: "rtk_antenna"

    # the list of additional source topics from which the tfs will be constructed
    tf_sources: []

    # first available tf source from this list will produce the utm and world origin tfs
    utm_source_priority: ["rtk_garmin", "rtk", "gps_garmin", "gps_baro"]

    # configuration of individual tf sources
    hw_api_raw:
      odom_topic: "odometry" # name of the topic (expects nav_msgs/Odometry topic type)
      tf_from_attitude: # used for transforming velocities before full transform is available
        enabled: false
      namespace: "hw_api" # the namespace of the topic (usually the node that publishes the topic)
      utm_based: false # if true, will publish tf to utm_origin
      inverted: true # publish as inverted tf (the default for inverted mrs tf tree convention)
      republish_in_frames: [] # the odometry message will be transformed and republished in the specified frames

    gps_garmin:
      odom_topic: "odom" # name of the topic (expects nav_msgs/Odometry topic type)
      tf_from_attitude: # used for transforming velocities before full transform is available
        enabled: true
        attitude_topic: "attitude" # name of the attitude topic(expects geometry_msgs/QuaternionStamped topic type)
      namespace: "estimation_manager/gps_garmin" # the namespace of the topic (usually the node that publishes the topic)
      utm_based: true # if true, will publish tf to utm_origin
      inverted: true # publish as inverted tf (the default for inverted mrs tf tree convention)
      # republish_in_frames: ["local_origin", "world_origin"] # the odometry message will be transformed and republished in the specified frames
      republish_in_frames: ["local_origin"] # the odometry message will be transformed and republished in the specified frames

    gps_baro:
      odom_topic: "odom" # name of the topic (expects nav_msgs/Odometry topic type)
      tf_from_attitude: # used for transforming velocities before full transform is available
        enabled: true
        attitude_topic: "attitude" # name of the attitude topic(expects geometry_msgs/QuaternionStamped topic type)
      namespace: "estimation_manager/gps_baro" # the namespace of the topic (usually the node that publishes the topic)
      utm_based: true # if true, will publish tf to utm_origin
      inverted: true # publish as inverted tf (the default for inverted mrs tf tree convention)
      republish_in_frames: [] # the odometry message will be transformed and republished in the specified frames

    rtk:
      odom_topic: "odom" # name of the topic (expects nav_msgs/Odometry topic type)
      tf_from_attitude: # used for transforming velocities before full transform is available
        enabled: true
        attitude_topic: "attitude" # name of the attitude topic(expects geometry_msgs/QuaternionStamped topic type)
      namespace: "estimation_manager/rtk" # the namespace of the topic (usually the node that publishes the topic)
      utm_based: true # if true, will publish tf to utm_origin
      inverted: true # publish as inverted tf (the default for inverted mrs tf tree convention)
      republish_in_frames: [] # the odometry message will be transformed and republished in the specified frames

    rtk_garmin:
      odom_topic: "odom" # name of the topic (expects nav_msgs/Odometry topic type)
      tf_from_attitude: # used for transforming velocities before full transform is available
        enabled: true
        attitude_topic: "attitude" # name of the attitude topic(expects geometry_msgs/QuaternionStamped topic type)
      namespace: "estimation_manager/rtk_garmin" # the namespace of the topic (usually the node that publishes the topic)
      utm_based: true # if true, will publish tf to utm_origin
      inverted: true # publish as inverted tf (the default for inverted mrs tf tree convention)
      republish_in_frames: [] # the odometry message will be transformed and republished in the specified frames

    passthrough:
      odom_topic: "odom" # name of the topic (expects nav_msgs/Odometry topic type)
      tf_from_attitude: # used for transforming velocities before full transform is available
        enabled: false
      namespace: "estimation_manager/passthrough" # the namespace of the topic (usually the node that publishes the topic)
      utm_based: false # if true, will publish tf to utm_origin
      inverted: true # publish as inverted tf (the default for inverted mrs tf tree convention)
      republish_in_frames: ["local_origin"] # the odometry message will be transformed and republished in the specified frames

    ground_truth:
      odom_topic: "odom" # name of the topic (expects nav_msgs/Odometry topic type)
      tf_from_attitude: # used for transforming velocities before full transform is available
        enabled: false
      namespace: "estimation_manager/ground_truth" # the namespace of the topic (usually the node that publishes the topic)
      utm_based: true # if true, will publish tf to utm_origin
      inverted: true # publish as inverted tf (the default for inverted mrs tf tree convention)
      republish_in_frames: ["local_origin"] # the odometry message will be transformed and republished in the specified frames

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_managers/config/public/gain_manager/gain_manager.yaml

mrs_uav_managers:

  gain_manager:

    estimator_types: [
      "gps_garmin",
      "gps_baro",
      "rtk",
      "rtk_garmin",
      "other",
      "ground_truth",
      "passthrough",
    ]

    gains: [
      "supersoft",
      "soft",
    ]

    # list of allowed gains per odometry mode
    allowed_gains:
      gps_garmin: ["supersoft", "soft"]
      gps_baro: ["supersoft", "soft"]
      rtk: ["supersoft", "soft"]
      rtk_garmin: ["supersoft", "soft"]
      other: ["supersoft", "soft"]
      ground_truth: ["supersoft", "soft"]
      passthrough: ["supersoft", "soft"]

    # those gains will be used automatically when a localization mode switches
    # and the current gains are not in the allowed list (next paragraphs)
    default_gains:
      gps_garmin: "soft"
      gps_baro: "soft"
      rtk: "soft"
      rtk_garmin: "soft"
      other: "supersoft"
      ground_truth: "soft"
      passthrough: "soft"

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_managers/config/public/gain_manager/gains.yaml

mrs_uav_managers:

  gain_manager:

    supersoft:

      horizontal:
        kp: 3.0
        kv: 2.0
        ka: 1.0

        kib: 0.1
        kib_lim: 10.0

        kiw: 0.1
        kiw_lim: 10.0

      vertical:
        kp: 15.0
        kv: 8.0
        ka: 1.0

      attitude:
        kq_roll_pitch: 5.0
        kq_yaw: 5.0

      mass_estimator:
        km: 0.5

        # the maximum estimated uav mass difference
        km_lim: 20.0 # [kg, at least 1/2 of the UAVs mass to allow landing detection]

    soft:

      horizontal:
        kp: 6.0
        kv: 4.0
        ka: 1.0

        kib: 0.1
        kib_lim: 10.0

        kiw: 0.1
        kiw_lim: 10.0

      vertical:
        kp: 15.0
        kv: 8.0
        ka: 1.0

      attitude:
        kq_roll_pitch: 5.0
        kq_yaw: 5.0

      mass_estimator:
        km: 0.5

        # the maximum estimated uav mass difference
        km_lim: 20.0 # [kg, at least 1/2 of the UAVs mass to allow landing detection]

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_managers/config/public/constraint_manager/constraints.yaml

mrs_uav_managers:

  constraint_manager:

    slow:

      horizontal:
        speed: 1.0        # [m/s]
        acceleration: 1.0 # [m/s^2]
        jerk: 20.0        # [m/s^3]
        snap: 20.0        # [m/s^4]

      vertical:

        ascending:
          speed: 1.0        # [m/s]
          acceleration: 1.0 # [m/s^2]
          jerk: 20.0        # [m/s^3]
          snap: 20.0        # [m/s^4]

        descending:
          speed: 1.0        # [m/s]
          acceleration: 1.0 # [m/s^2]
          jerk: 20.0        # [m/s^3]
          snap: 20.0        # [m/s^4]

      heading:
        speed: 0.5        # [rad/s]
        acceleration: 1.0 # [rad/s^2]
        jerk: 10.0        # [rad/s^3]
        snap: 10.0        # [rad/s^4]

      angular_speed:
        roll: 60.0  # [rad/s]
        pitch: 60.0 # [rad/s]
        yaw: 10.0   # [rad/s]

      tilt: 60.0 # [deg]

    medium:

      horizontal:
        speed: 4.0        # [m/s]
        acceleration: 2.0 # [m/s^2]
        jerk: 40.0        # [m/s^3]
        snap: 40.0        # [m/s^4]

      vertical:

        ascending:
          speed: 2.0        # [m/s]
          acceleration: 1.0 # [m/s^2]
          jerk: 40.0        # [m/s^3]
          snap: 40.0        # [m/s^4]

        descending:
          speed: 2.0        # [m/s]
          acceleration: 1.0 # [m/s^2]
          jerk: 40.0        # [m/s^3]
          snap: 40.0        # [m/s^4]

      heading:
        speed: 1.0        # [rad/s]
        acceleration: 1.0 # [rad/s^2]
        jerk: 20.0        # [rad/s^3]
        snap: 20.0        # [rad/s^4]

      angular_speed:
        roll: 60.0  # [rad/s]
        pitch: 60.0 # [rad/s]
        yaw: 10.0   # [rad/s]

      tilt: 60.0 # [deg]

    fast:

      horizontal:
        speed: 8.0        # [m/s]
        acceleration: 4.0 # [m/s^2]
        jerk: 60.0        # [m/s^3]
        snap: 60.0        # [m/s^4]

      vertical:

        ascending:
          speed: 4.0        # [m/s]
          acceleration: 2.0 # [m/s^2]
          jerk: 60.0        # [m/s^3]
          snap: 60.0        # [m/s^4]

        descending:
          speed: 4.0        # [m/s]
          acceleration: 2.0 # [m/s^2]
          jerk: 60.0        # [m/s^3]
          snap: 60.0        # [m/s^4]

      heading:
        speed: 2.0        # [rad/s]
        acceleration: 2.0 # [rad/s^2]
        jerk: 40.0        # [rad/s^3]
        snap: 40.0        # [rad/s^4]

      angular_speed:
        roll: 60.0  # [rad/s]
        pitch: 60.0 # [rad/s]
        yaw: 10.0   # [rad/s]

      tilt: 60.0 # [deg]

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_managers/config/public/constraint_manager/constraint_manager.yaml

mrs_uav_managers:

  constraint_manager:

    estimator_types: [
      "gps_garmin",
      "gps_baro",
      "rtk",
      "rtk_garmin",
      "other",
      "ground_truth",
      "passthrough",
    ]

    constraints: [
      "slow",
      "medium",
      "fast",
    ]

    # list of allowed constraints per odometry mode
    allowed_constraints:
      gps_garmin: ["slow", "medium", "fast"]
      gps_baro: ["slow", "medium", "fast"]
      rtk: ["slow", "medium", "fast"]
      rtk_garmin: ["slow", "medium", "fast"]
      other: ["slow"]
      ground_truth: ["slow", "medium", "fast"]
      passthrough: ["slow", "medium", "fast"]

    # those constraints will be used automatically when a localization mode switches
    # and the current constraints are not in the allowed list (next paragraphs)
    default_constraints:
      gps_garmin: "slow"
      gps_baro: "slow"
      rtk: "slow"
      rtk_garmin: "slow"
      other: "slow"
      ground_truth: "slow"
      passthrough: "slow"

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_managers/config/public/estimation_manager/estimation_manager.yaml

mrs_uav_managers:

  estimation_manager:

    debug_topics:
      input: true
      output: true
      state: true
      covariance: false
      innovation: false
      correction: true
      correction_delay: false
      diagnostics: false


######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_trackers/config/public/joy_tracker.yaml

mrs_uav_trackers:

  joy_tracker:

    vertical_tracker:
      vertical_speed: 0.6

    max_tilt: 0.50 # [rad]

    heading_tracker:
      heading_rate: 1.0

    # channel numbers, indices in array
    channels:

      pitch: 1 # []
      roll: 3 # []
      heading: 0 # []
      throttle: 4 # []

    # multipliers for scaling and reversing the channels
    channel_multipliers:

      pitch: 1.0 # []
      roll: -1.0 # []
      heading: 1.0 # []
      throttle: 1.0 # []

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_trackers/config/public/speed_tracker.yaml

mrs_uav_trackers:

  speed_tracker:

    # which tracker should be activate when timeout occurs
    backup_tracker: "MpcTracker"

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_trackers/config/public/landoff_tracker.yaml

mrs_uav_trackers:

  landoff_tracker:

    # During takeoff, the control error should not exceed this number.
    # if control error reaches this number, the trackers stops moving the
    # reference and waits for the controllers to move the drone in closer.
    max_position_difference: 0.7

    vertical_tracker:

      takeoff_speed: 1.0
      takeoff_acceleration: 0.3

      landing_speed: 0.5
      landing_acceleration: 0.3

      # beware, this is for emergency landing only
      elanding_speed: 0.5
      elanding_acceleration: 1.0

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_trackers/config/public/mpc_tracker.yaml

mrs_uav_trackers:

  mpc_tracker:

    wiggle:
      enabled: false
      amplitude: 0.5 # [m]
      frequency: 0.2 # [Hz]

    # mrs collision avoidance
    collision_avoidance:

      enabled:           true # disabling this will stop this UAV to react to others, but it will still transmit data to others
      enabled_passively: true # disabling this will stop this uav to even transmit its data to others (only if enabled: false)
      radius: 5.0 # [m]
      correction: 3.0 # [m]


######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_controllers/config/public/se3_controller.yaml

mrs_uav_controllers:

  se3_controller:

    se3:

      constraints:

        throttle_saturation: 0.9 # [-], range from 0 to 1

        # When the controller wants to output tilt larger than this,
        # it will return an empty command instead, which should trigger
        # a failsafe in the control manager.
        tilt_angle_failsafe:
          enabled: true
          limit: 90.0 # [deg]

      angular_rate_feedforward:

        # compensation of a parasitic heading rate due to pitch and roll rate
        parasitic_pitch_roll: true

        # jerk feed forward
        jerk: true

      rotation_matrix: 1 # {0 = lee, 1 = baca (oblique projection)}

      # preferred output mode:
      # - choose this one if more output modes are available
      preferred_output: 2 # {0 = actuators,
                          #  1 = control_group,
                          #  2 = attitude_rate,
                          #  3 = attitude,}

    # PID gains for the position controller
    # used only when outputing desired "velocity"
    position_controller:

      translation_gains:
        p: 2.0
        d: 0.15
        i: 0.2
      heading_gains:
        p: 1.0
        d: 0.1
        i: 0.01

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_controllers/config/public/mpc_controller.yaml

mrs_uav_controllers:

  mpc_controller:

    so3:

      rampup:
        enabled: true
        speed: 0.75 # [1/s]

      mass_estimator:
        km: 0.5 # [kg/s], mass estimator max rate
        km_lim: 20.0 # [kg, at least 1/2 of the UAVs mass to allow landing detection]

      # preferred output mode:
      # - choose this one if more output modes are available
      preferred_output: 2 # {0 = actuators,
                          #  1 = control_group,
                          #  2 = attitude_rate,
                          #  3 = attitude,}

      gains:

        integral_gains:

          kiw: 0.1
          kib: 0.1

          kiw_lim: 10.0
          kib_lim: 10.0

        attitude:
          roll_pitch: 5.0
          yaw: 1.0

        attitude_rate:
          roll_pitch: 4.0
          yaw: 4.0

    # PID gains for the position controller
    # used only when outputing desired "velocity"
    position_controller:

      translation_gains:
        p: 2.0
        d: 0.15
        i: 0.2
      heading_gains:
        p: 1.0
        d: 0.1
        i: 0.01

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_controllers/config/public/failsafe_controller.yaml

mrs_uav_controllers:

  failsafe_controller:

    throttle_output:

      throttle_decrease_rate: 0.015 # [1/s]

      # how much throttle (of the nominal+estimated offset) to apply after activation
      initial_throttle_percentage: 0.98 # [-]

    acceleration_output:
      descend_acceleration: 0.2 # m/s^2

    velocity_output:
      descend_speed: 1.0 # m/s


######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_trajectory_generation/config/public/trajectory_generation.yaml

mrs_uav_trajectory_generation:

  # execution time limiter
  max_time: 0.5 # [s]

  # when true, only the fallback solver will be used by default
  enforce_fallback_solver: false

  # check and fix the max deviation between the input path and the output trajectory
  # by subsampling the original path with more waypoints
  check_trajectory_deviation:
    enabled: true
    max_deviation: 0.05 # [m]
    max_iterations: 6 # [-]

  # allows to neglect waypoints in the original path if the new path
  # does not violate max distance from the original path.
  # This makes for similar but sparser paths, which are easier for the
  # trajectory generator to work with.
  path_straightener:
    enabled: false
    max_deviation: 0.05 # [m]
    max_hdg_deviation: 0.1 # [rad]

  # waypoints too close to each other cause issues in the optimization
  # the incoming path is preprocessed, such waypoints are neglected
  min_waypoint_distance: 0.05

  # sampling dt of the output trajectory (when the path's stamp is not frmo future, 0.2 otherwise)
  sampling_dt: 0.2 # [s]

  # while checking the final trajectory, don't allow
  # returning results which are time-wise n-times longer / shorter than
  # the initial 'baca' prediction of the length
  max_trajectory_len_factor: 3.0 # [-]
  min_trajectory_len_factor: 0.33 # [-]

  # how many times to try the plannin + sampling
  n_attempts: 3 # [-]

  # when true, the resulting trajectory will have a heading always pointing tangentially along the trajectory
  override_heading_atan2: false

  # if the generation and sampling fails completely and the result is infeasible
  # should we at least provide a naive constant-velocity solution which will
  # move the drone and therefore avoid potential deadlocks?
  fallback_sampling:

    enabled: true
    accel_factor: 1.00 # how fast when comparing to constraints
    speed_factor: 1.00 # how fast when comparing to constraints

    # when stopping at waypoints, stop for this time
    stopping_time: 2.0 # [s]

    # when in motion, the first waypoint segment will be longer
    # to allow transition from initial conditions
    first_waypoint_additional_stop: false


######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_state_estimators/config/public/gps_baro/hdg_hw_api.yaml

mrs_uav_managers:
  estimation_manager:
    # passthrough estimator - no estimation on its own
    gps_baro: # namespace of the state estimator
      hdg_hw_api: # namespace of the heading estimator

        max_flight_z: 100.0 # [m] maximum allowed flight Z (in the estimator frame)

        topics:
          orientation: "hw_api/orientation" # without uav namespace
          angular_velocity: "hw_api/angular_velocity" # without uav namespace

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_state_estimators/config/public/gps_baro/gps_baro.yaml

mrs_uav_managers:
  estimation_manager:
    gps_baro: # namespace of the state estimator
      override_frame_id:
        enabled: false # if true, custom frame_id can be provided instead of the default "[estimator_name]_origin"
        frame_id: ""

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_state_estimators/config/public/gps_baro/alt_baro.yaml

mrs_uav_managers:
  estimation_manager:
    gps_baro: # namespace of the state estimator
      alt_baro: # namespace of the altitude estimator

        max_flight_z: 100.0 # [m] maximum allowed flight Z (in the estimator frame)

        innovation:
          limit: 1.0 # [m] innovation limit that will trigger action
          action: "eland" # {"eland", "switch", "mitigate"}

        repredictor: # repredictor for correct fusion of delayed measurements
          enabled: false

        process_noise: # process noise covariance (Q)
          pos: 1.0 # position state
          vel: 1.0 # velocity state
          acc: 1.0 # acceleration state

        corrections: [
          # positional correction only makes the estimator unstable, vel_hw_api is not a derivative of pos_hw_api, vel_hw_api_only works best
          "vel_hw_api"
        ]

        vel_hw_api:
          state_id: 1 # 0 - position, 1 - velocity, 2 - acceleration
          noise: 0.001 # measurement noise covariance (R)
          noise_unhealthy_coeff: 100.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)
          message:
            type: "geometry_msgs/Vector3Stamped"
            topic: "hw_api/velocity" # without uav namespace
            limit: 
              delay: 1.0 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 0.5 # [s] larger time step between messages will flag correction as unhealthy

          processors: [] # types of processors attached to this measurement

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_state_estimators/config/public/gps_baro/lat_gps.yaml

mrs_uav_managers:
  estimation_manager:
    gps_baro: # namespace of the state estimator
      lat_gps: # namespace of the lateral estimator

        max_flight_z: 100.0 # [m] maximum allowed flight Z (in the estimator frame)

        innovation:
          limit: 1.0 # [m] innovation limit that will trigger action
          action: "eland" # {"eland", "switch", "mitigate"}

        hdg_source_topic: "gps_baro/hdg_hw_api/output" # [mrs_uav_state_estimation/EstimatorOutput]

        repredictor: # repredictor for correct fusion of delayed measurements
          enabled: false

        process_noise: # process noise covariance (Q)
          pos: 0.1 # position state
          vel: 1.0 # velocity state
          acc: 1.0 # acceleration state

        corrections: [
          "pos_hw_api"
        ]

        pos_hw_api:
          state_id: 0 # 0 - position, 1 - velocity, 2 - acceleration
          noise: 0.01 # measurement noise covariance (R)
          noise_unhealthy_coeff: 100.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)
          message:
            type: "geometry_msgs/PointStamped"
            topic: "hw_api/position" # without uav namespace
            limit: 
              delay: 0.5 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 0.5 # [s] larger time step between messages will flag correction as unhealthy

          processors: ["tf_to_world"] # types of processors attached to this measurement

          tf_to_world:
            gnss_topic: "hw_api/gnss"

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_state_estimators/config/public/passthrough/passthrough.yaml

mrs_uav_managers:
  estimation_manager:
    passthrough:
      max_flight_z: 100.0 # [m] maximum allowed flight Z (in the estimator frame)

      message:
        topic: "hw_api/odometry"

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_state_estimators/config/public/garmin_agl/garmin_agl.yaml

mrs_uav_managers:
  estimation_manager:
    garmin_agl: # namespace of the agl estimator
      garmin_agl: # namespace of the agl estimator
        max_flight_z: 10.0 # [m] maximum allowed flight Z (in the estimator frame)

        innovation: 
          limit: 5.0 # [m] innovation limit that will trigger action
          action: "none" # {"eland", "switch", "mitigate", "none"}

        repredictor: # repredictor for correct fusion of delayed measurements
          enabled: false

        process_noise: # process noise covariance (Q)
          pos: 1.0 # position state
          vel: 1.0 # velocity state
          acc: 1.0 # acceleration state

        corrections: [
          "pos_garmin"
        ]

        pos_garmin:
          state_id: 0 # 0 - position, 1 - velocity, 2 - acceleration
          noise: 0.1 # measurement noise covariance (R)
          noise_unhealthy_coeff: 100.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)
          message:
            type: "sensor_msgs/Range"
            topic: "hw_api/distance_sensor" # without uav namespace
            limit: 
              delay: 1.0 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 1.0 # [s] larger time step between messages will flag correction as unhealthy

          processors: [] # types of processors attached to this measurement

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_state_estimators/config/public/gps_garmin/alt_garmin.yaml

mrs_uav_managers:
  estimation_manager:
    gps_garmin: # namespace of the state estimator
      alt_garmin: # namespace of the altitude estimator

        max_flight_z: 10.0 # [m] maximum allowed flight Z (in the estimator frame)

        innovation:
          limit: 1.0 # [m] innovation limit that will trigger action
          action: "mitigate" # {"eland", "switch", "mitigate"}

        repredictor: # repredictor for correct fusion of delayed measurements
          enabled: false

        process_noise: # process noise covariance (Q)
          pos: 1.0 # position state
          vel: 1.0 # velocity state
          acc: 1.0 # acceleration state

        corrections: [
          "pos_garmin",
          "vel_hw_api"
        ]

        pos_garmin:
          state_id: 0 # 0 - position, 1 - velocity, 2 - acceleration
          noise: 0.1 # measurement noise covariance (R)
          noise_unhealthy_coeff: 100.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)
          message:
            type: "sensor_msgs/Range"
            topic: "hw_api/distance_sensor" # without uav namespace
            limit: 
              delay: 0.5 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 2.0 # [s] larger time step between messages will flag correction as unhealthy

          processors: ["excessive_tilt", "median_filter", "saturate"] # types of processors attached to this measurement (the processors are called in exactly this order)
          
          median_filter:
            buffer_size: 100 # [samples] number of historic values from which the median is calculated
            max_diff: 2.0 # [m] difference of input value from median to be considered valid

          saturate:
            start_enabled: true # saturate processor can start as disabled and then be enabled by a service or a trigger condition
            keep_enabled: true # keep enabled even after the corrections are near the value of state
            min: -0.1
            max: 0.1
            limit: 2.0

          excessive_tilt:
            orientation_topic: "hw_api/orientation"
            max_tilt: 30.0 # [deg]

      # Parameters of altitude median filters - buffer_size , max_diff 
        vel_hw_api:
          state_id: 1 # 0 - position, 1 - velocity, 2 - acceleration
          noise: 0.01 # measurement noise covariance (R)
          noise_unhealthy_coeff: 100.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)
          message:
            type: "geometry_msgs/Vector3Stamped"
            topic: "hw_api/velocity" # without uav namespace
            limit: 
              delay: 1.0 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 0.5 # [s] larger time step between messages will flag correction as unhealthy

          processors: [] # types of processors attached to this measurement

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_state_estimators/config/public/gps_garmin/gps_garmin.yaml

mrs_uav_managers:
  estimation_manager:
    gps_garmin: # namespace of the state estimator
      override_frame_id:
        enabled: false # if true, custom frame_id can be provided instead of the default "[estimator_name]_origin"
        frame_id: ""





######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_state_estimators/config/public/gps_garmin/hdg_hw_api.yaml

mrs_uav_managers:
  estimation_manager:
    gps_garmin: # namespace of the state estimator
      hdg_hw_api: # namespace of the heading estimator

        max_flight_z: 100.0 # [m] maximum allowed flight Z (in the estimator frame)

        topics:
          orientation: "hw_api/orientation" # without uav namespace
          angular_velocity: "hw_api/angular_velocity" # without uav namespace

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_state_estimators/config/public/gps_garmin/lat_gps.yaml

mrs_uav_managers:
  estimation_manager:
    gps_garmin: # namespace of the state estimator
      lat_gps: # namespace of the lateral estimator

        max_flight_z: 100.0 # [m] maximum allowed flight Z (in the estimator frame)

        innovation:
          limit: 1.0 # [m] innovation limit that will trigger action
          action: "mitigate" # {"eland", "switch", "mitigate"}

        hdg_source_topic: "gps_garmin/hdg_hw_api/output" # [mrs_uav_state_estimation/EstimatorOutput]

        repredictor: # repredictor for correct fusion of delayed measurements
          enabled: false

        process_noise: # process noise covariance (Q)
          # pos: 1 # position state
          # vel: 10 # velocity state
          # acc: 0.01 # acceleration state
          pos: 0.1 # position state
          vel: 1 # velocity state
          acc: 1 # acceleration state

        corrections: [
          "pos_hw_api"
        ]

        pos_hw_api:
          state_id: 0 # 0 - position, 1 - velocity, 2 - acceleration
          noise: 0.01 # measurement noise covariance (R)
          noise_unhealthy_coeff: 100.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)
          message:
            type: "geometry_msgs/PointStamped"
            topic: "hw_api/position" # without uav namespace
            limit: 
              delay: 0.5 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 0.5 # [s] larger time step between messages will flag correction as unhealthy

          processors: ["tf_to_world"] # types of processors attached to this measurement

          tf_to_world:
            gnss_topic: "hw_api/gnss"


######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_state_estimators/config/public/rtk/hdg_hw_api.yaml

mrs_uav_managers:
  estimation_manager:
    # passthrough estimator - no estimation on its own
    rtk: # namespace of the state estimator
      hdg_hw_api: # namespace of the heading estimator

        max_flight_z: 100.0 # [m] maximum allowed flight Z (in the estimator frame)

        topics:
          orientation: "hw_api/orientation" # without uav namespace
          angular_velocity: "hw_api/angular_velocity" # without uav namespace


######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_state_estimators/config/public/rtk/alt_rtk.yaml

mrs_uav_managers:
  estimation_manager:
    rtk: # namespace of the state estimator
      alt_rtk: # namespace of the altitude estimator

        max_flight_z: 100.0 # [m] maximum allowed flight Z (in the estimator frame)

        innovation:
          limit: 1.0 # [m] innovation limit that will trigger action
          action: "mitigate" # {"eland", "switch", "mitigate"}

        repredictor: # repredictor for correct fusion of delayed measurements
          enabled: false

        process_noise: # process noise covariance (Q)
          pos: 1.0 # position state
          vel: 1.0 # velocity state
          acc: 1.0 # acceleration state

        corrections: [
          "pos_rtk",
          "vel_hw_api"
        ]

        pos_rtk:
          state_id: 0 # 0 - position, 1 - velocity, 2 - acceleration
          noise: 0.1 # measurement noise covariance (R)
          noise_unhealthy_coeff: 10.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)
          message:
            type: "mrs_msgs/RtkGps"
            topic: "hw_api/rtk" # without uav namespace
            limit: 
              delay: 0.5 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 1.0 # [s] larger time step between messages will flag correction as unhealthy

          processors: ["saturate"] # types of processors attached to this measurement

          # median_filter:
          #   buffer_size: 100 # [samples] number of historic values from which the median is calculated
          #   max_diff: 0.5 # [m] difference of input value from median to be considered valid

          saturate:
            start_enabled: true # saturate processor can start as disabled and then be enabled by a service or a trigger condition
            keep_enabled: true # keep enabled even after the corrections are near the value of state
            min: -0.3
            max: 0.3
            limit: 1.0

        vel_hw_api:
          state_id: 1 # 0 - position, 1 - velocity, 2 - acceleration
          noise: 0.1 # measurement noise covariance (R)
          noise_unhealthy_coeff: 1.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)
          message:
            type: "geometry_msgs/Vector3Stamped"
            topic: "hw_api/velocity" # without uav namespace
            limit: 
              delay: 1.0 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 0.5 # [s] larger time step between messages will flag correction as unhealthy

          processors: [] # types of processors attached to this measurement

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_state_estimators/config/public/rtk/rtk.yaml

mrs_uav_managers:
  estimation_manager:
    rtk: # namespace of the state estimator
      override_frame_id:
        enabled: false # if true, custom frame_id can be provided instead of the default "[estimator_name]_origin"
        frame_id: ""





######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_state_estimators/config/public/rtk/lat_rtk.yaml

mrs_uav_managers:
  estimation_manager:
    rtk: # namespace of the state estimator
      lat_rtk: # namespace of the lateral estimator

        max_flight_z: 100.0 # [m] maximum allowed flight Z (in the estimator frame)

        innovation:
          limit: 1.0 # [m] innovation limit that will trigger action
          action: "mitigate" # {"eland", "switch", "mitigate"}

        hdg_source_topic: "rtk/hdg_hw_api/output" # [mrs_uav_state_estimation/EstimatorOutput]

        repredictor: # repredictor for correct fusion of delayed measurements
          enabled: false

        process_noise: # process noise covariance (Q)
          pos: 0.1 # position state
          vel: 1.0 # velocity state
          acc: 1.0 # acceleration state

        corrections: [
          "pos_rtk",
          "vel_hw_api"
        ]

        pos_rtk:
          state_id: 0 # 0 - position, 1 - velocity, 2 - acceleration
          noise: 0.001 # measurement noise covariance (R)
          noise_unhealthy_coeff: 1000.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)

          message:
            type: "mrs_msgs/RtkGps"
            topic: "hw_api/rtk" # without uav namespace
            limit: 
              delay: 0.5 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 1.0 # [s] larger time step between messages will flag correction as unhealthy

          processors: ["saturate"] # types of processors attached to this measurement

          # median_filter:
          #   buffer_size: 100 # [samples] number of historic values from which the median is calculated
          #   max_diff: 0.5 # [m] difference of input value from median to be considered valid

          saturate:
            start_enabled: true # saturate processor can start as disabled and then be enabled by a service or a trigger condition
            keep_enabled: true # keep enabled even after the corrections are near the value of state
            min: -0.9
            max: 0.9
            limit: 0.9

        vel_hw_api:
          state_id: 1 # 0 - position, 1 - velocity, 2 - acceleration
          noise: 10.0 # measurement noise covariance (R)
          noise_unhealthy_coeff: 100.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)
          message:
            type: "geometry_msgs/Vector3Stamped"
            topic: "hw_api/velocity" # without uav namespace
            limit: 
              delay: 0.5 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 0.5 # [s] larger time step between messages will flag correction as unhealthy

          processors: [] # types of processors attached to this measurement

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_state_estimators/config/public/rtk_garmin/alt_garmin.yaml

mrs_uav_managers:
  estimation_manager:
    rtk_garmin: # namespace of the state estimator
      alt_garmin: # namespace of the altitude estimator

        max_flight_z: 10.0 # [m] maximum allowed flight Z (in the estimator frame)

        innovation:
          limit: 1.0 # [m] innovation limit that will trigger action
          action: "mitigate" # {"eland", "switch", "mitigate"}

        repredictor: # repredictor for correct fusion of delayed measurements
          enabled: false

        process_noise: # process noise covariance (Q)
          pos: 1.0 # position state
          vel: 1.0 # velocity state
          acc: 1.0 # acceleration state

        corrections: [
          "pos_garmin",
          "vel_hw_api"
        ]

        pos_garmin:
          state_id: 0 # 0 - position, 1 - velocity, 2 - acceleration
          noise: 0.1 # measurement noise covariance (R)
          noise_unhealthy_coeff: 100.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)
          message:
            type: "sensor_msgs/Range"
            topic: "hw_api/distance_sensor" # without uav namespace
            limit: 
              delay: 0.5 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 0.5 # [s] larger time step between messages will flag correction as unhealthy

          processors: ["excessive_tilt", "median_filter", "saturate"] # types of processors attached to this measurement (the processors are called in exactly this order)
          
          median_filter:
            buffer_size: 100 # [samples] number of historic values from which the median is calculated
            max_diff: 2.0 # [m] difference of input value from median to be considered valid

          saturate:
            start_enabled: true # saturate processor can start as disabled and then be enabled by a service or a trigger condition
            keep_enabled: true # keep enabled even after the corrections are near the value of state
            min: -0.1
            max: 0.1
            limit: 2.0

          excessive_tilt:
            orientation_topic: "hw_api/orientation"
            max_tilt: 30.0 # [deg]

      # Parameters of altitude median filters - buffer_size , max_diff 
        vel_hw_api:
          state_id: 1 # 0 - position, 1 - velocity, 2 - acceleration
          noise: 0.01 # measurement noise covariance (R)
          noise_unhealthy_coeff: 100.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)
          message:
            type: "geometry_msgs/Vector3Stamped"
            topic: "hw_api/velocity" # without uav namespace
            limit: 
              delay: 1.0 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 0.5 # [s] larger time step between messages will flag correction as unhealthy

          processors: [] # types of processors attached to this measurement

######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_state_estimators/config/public/rtk_garmin/hdg_hw_api.yaml

mrs_uav_managers:
  estimation_manager:
    # passthrough estimator - no estimation on its own
    rtk_garmin: # namespace of the state estimator
      hdg_hw_api: # namespace of the heading estimator

        max_flight_z: 100.0 # [m] maximum allowed flight Z (in the estimator frame)

        topics:
          orientation: "hw_api/orientation" # without uav namespace
          angular_velocity: "hw_api/angular_velocity" # without uav namespace


######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_state_estimators/config/public/rtk_garmin/rtk_garmin.yaml

mrs_uav_managers:
  estimation_manager:
    rtk_garmin: # namespace of the state estimator
      override_frame_id:
        enabled: false # if true, custom frame_id can be provided instead of the default "[estimator_name]_origin"
        frame_id: ""





######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_state_estimators/config/public/rtk_garmin/lat_rtk.yaml

mrs_uav_managers:
  estimation_manager:
    rtk_garmin: # namespace of the state estimator
      lat_rtk: # namespace of the lateral estimator

        max_flight_z: 100.0 # [m] maximum allowed flight Z (in the estimator frame)

        innovation:
          limit: 1.0 # [m] innovation limit that will trigger action
          action: "mitigate" # {"eland", "switch", "mitigate"}

        hdg_source_topic: "rtk/hdg_hw_api/output" # [mrs_uav_state_estimation/EstimatorOutput]

        repredictor: # repredictor for correct fusion of delayed measurements
          enabled: false

        process_noise: # process noise covariance (Q)
          pos: 0.1 # position state
          vel: 1.0 # velocity state
          acc: 1.0 # acceleration state

        corrections: [
          "pos_rtk",
          "vel_hw_api"
        ]

        pos_rtk:
          state_id: 0 # 0 - position, 1 - velocity, 2 - acceleration
          noise: 0.001 # measurement noise covariance (R)
          noise_unhealthy_coeff: 1000.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)

          message:
            type: "mrs_msgs/RtkGps"
            topic: "hw_api/rtk" # without uav namespace
            limit: 
              delay: 0.5 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 1.0 # [s] larger time step between messages will flag correction as unhealthy

          processors: ["saturate"] # types of processors attached to this measurement

          # median_filter:
          #   buffer_size: 100 # [samples] number of historic values from which the median is calculated
          #   max_diff: 0.5 # [m] difference of input value from median to be considered valid

          saturate:
            start_enabled: true # saturate processor can start as disabled and then be enabled by a service or a trigger condition
            keep_enabled: true # keep enabled even after the corrections are near the value of state
            min: -0.2
            max: 0.2
            limit: 1.0

        vel_hw_api:
          state_id: 1 # 0 - position, 1 - velocity, 2 - acceleration
          noise: 0.01 # measurement noise covariance (R)
          noise_unhealthy_coeff: 100.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)
          message:
            type: "geometry_msgs/Vector3Stamped"
            topic: "hw_api/velocity" # without uav namespace
            limit: 
              delay: 0.5 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 0.5 # [s] larger time step between messages will flag correction as unhealthy

          processors: [] # types of processors attached to this measurement


######################################
# The following section was taken from:
# /opt/ros/noetic/share/mrs_uav_status/config/public/default.yaml

mrs_uav_status:

  colorblind_mode: True # Set True to change green color to blue

  enable_profiler: False

  start_minimized: False

  turbo_remote_constraints: "fast"

  # List of topics to monitor, format is:
  # topic_name Displayed name (can be multiple words) expected_frequency
  # if "/" is provided at the beginning of topic_name, the topic name is considered as written,
  # if there is no "/" at the beginning, UAV_NAME is automatically added in from of the topic name (/uav1/topic_name)
  want_hz: [
        # "garmin/range Garmin 100",
        # "bluefox/image_raw Bluefox 100",
        # "odometry/uav_state uav state 100",
        ]

  tf_static_list: [
        "bluefox_down bluefox_down/camera_info BFox Down 20",
        "bluefox_front bluefox_front/camera_info BFox Front 20",
        "bluefox_optflow bluefox_optflow/camera_info BFox Optflow 50",
        "bluefox_optflow_optical bluefox_optflow/camera_info BFox Optflow 50",
        "bluefox_optflow optic_flow/velocity Optflow Vel 50",
        "bluefox_optflow_optical optic_flow/velocity Optflow Vel 50",
        "rs_d435/link rs_d435/color/camera_info Realsense 30",
        "rplidar rplidar/scan RPlidar 10",
        "os_sensor os_cloud_nodelet/is_alive Ouster 10",
        "uvcam_left uvdar_bluefox/left/camera_info UV_BFox_Left 60",
        "uvcam_right uvdar_bluefox/right/camera_info UV_BFox_Right 60",
        "uvcam_back uvdar_bluefox/back/camera_info UV_BFox_Back 60",
        "basler_left basler_left/camera_info Basler Left 5",
        "basler_right basler_right/camera_info Basler Right 5",
        "up_rgbd/link up_rgbd/color/camera_info RS Up 20+",
        "down_rgbd/link down_rgbd/color/camera_info RS Down 20+",
        "rgbd/link rgbd/color/camera_info RS 20+",
        ]


